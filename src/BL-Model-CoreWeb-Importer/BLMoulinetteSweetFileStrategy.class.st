"
I use file generated by JSweet to extract the typescript method
"
Class {
	#name : #BLMoulinetteSweetFileStrategy,
	#superclass : #BLMoulinetteStrategy,
	#instVars : [
		'rootFolder'
	],
	#category : 'BL-Model-CoreWeb-Importer'
}

{ #category : #'as yet unclassified' }
BLMoulinetteSweetFileStrategy >> computeTSClassNameFromFAMIXCLass: aFAMIXClass [
	| hostMethod hostClass notAnonymousHostClass hostName |
	hostName := ''.
	hostMethod := aFAMIXClass notAnonymousContainer.
	notAnonymousHostClass := aFAMIXClass notAnonymousClassContainer.
	hostClass := (hostMethod atScope: FAMIXClass) at: 1.
	hostClass isAnonymousClass
		ifTrue: [ hostName := self computeTSClassNameFromFAMIXCLass: hostClass ]
		ifFalse: [ hostName := hostClass name ].
	^ hostName , '$'
		,
			((((hostMethod types select: [ :client | client notAnonymousClassContainer = notAnonymousHostClass ]) asOrderedCollection
				sort: [ :a :b | a sourceAnchor startPos < b sourceAnchor startPos ]) indexOf: aFAMIXClass ifAbsent: [ self error: 'I don''t know currently' ]) - 1) asString
]

{ #category : #'as yet unclassified' }
BLMoulinetteSweetFileStrategy >> computeTSFileNameFromFAMIXCLass: aFAMIXClass [
	"./Source/BLCoreIncubatorGwt/src/fr/bl/client/kitchensink/PhaseHomeKitchenSink.java
	-> 
	fr/bl/client/kitchensink/PhaseHomeKitchenSink.ts"
	
	^ (aFAMIXClass sourceAnchor fileName replaceAllRegex: '.java' with: '.ts') copyWithRegex: '.*/src/' matchesReplacedWith: ''
]

{ #category : #'as yet unclassified' }
BLMoulinetteSweetFileStrategy >> convertFAMIXClassToCodeMetierModel: aFAMIXClass [
	| correspondingTSFile tsClassName rightBracketPos leftBracketPos contentLocalCache |  
	correspondingTSFile := self rootFolder / (self computeTSFileNameFromFAMIXCLass: aFAMIXClass).
	tsClassName := self computeTSClassNameFromFAMIXCLass: aFAMIXClass.
	contentLocalCache := correspondingTSFile contents.
	rightBracketPos := contentLocalCache indexOf: ${ startingAt: ( contentLocalCache findString:  'export class ', tsClassName).
	leftBracketPos :=contentLocalCache findCloseBracketFor: rightBracketPos.
	^ (contentLocalCache copyFrom: rightBracketPos to: leftBracketPos) replaceAllRegex: '\*/' with: '//'
]

{ #category : #accessing }
BLMoulinetteSweetFileStrategy >> rootFolder [
	^ rootFolder ifNil: [ self error: 'Root Not Defined' ]
]

{ #category : #accessing }
BLMoulinetteSweetFileStrategy >> rootFolder: aRootFolder [
	rootFolder := aRootFolder asFileReference 
]
